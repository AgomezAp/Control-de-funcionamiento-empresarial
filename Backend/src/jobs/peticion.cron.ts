import cron from "node-cron";
import Peticion from "../models/Peticion";
import { Op } from "sequelize";
import { PeticionService } from "../services/peticion.service";
import { EstadisticaService } from "../services/estadistica.service";
import { FacturacionService } from "../services/facturacion.service";

const peticionService = new PeticionService();
const estadisticaService = new EstadisticaService();
const facturacionService = new FacturacionService();

// ==========================================
// CRON: Revisar peticiones vencidas
// Se ejecuta cada 30 minutos
// ==========================================
export const verificarPeticionesVencidas = cron.schedule("*/30 * * * *", async () => {
  try {
    console.log("üîÑ Verificando peticiones vencidas...");

    const ahora = new Date();

    // Buscar peticiones en progreso que ya pasaron su fecha l√≠mite
    const peticionesVencidas = await Peticion.findAll({
      where: {
        estado: "En Progreso",
        fecha_limite: {
          [Op.lt]: ahora,
        },
      },
    });

    if (peticionesVencidas.length > 0) {
      console.log(`‚ö†Ô∏è  ${peticionesVencidas.length} peticiones vencidas encontradas`);

      // Aqu√≠ puedes decidir qu√© hacer:
      // 1. Notificar a los responsables
      // 2. Cambiar estado autom√°ticamente
      // 3. Registrar en auditor√≠a

      for (const peticion of peticionesVencidas) {
        console.log(`‚ùå Petici√≥n ${peticion.id} vencida - L√≠mite: ${peticion.fecha_limite}`);
        
        // TODO: Implementar notificaciones (email, websockets, etc.)
      }
    } else {
      console.log("‚úÖ No hay peticiones vencidas");
    }
  } catch (error) {
    console.error("‚ùå Error verificando peticiones vencidas:", error);
  }
});

// ==========================================
// CRON: Mover peticiones resueltas al hist√≥rico
// Se ejecuta cada hora
// ==========================================
export const moverPeticionesResueltasAHistorico = cron.schedule("0 * * * *", async () => {
  try {
    console.log("üîÑ Moviendo peticiones resueltas al hist√≥rico...");

    const peticionesParaMover = await Peticion.findAll({
      where: {
        estado: {
          [Op.in]: ["Resuelta", "Cancelada"],
        },
      },
    });

    if (peticionesParaMover.length > 0) {
      console.log(`üì¶ ${peticionesParaMover.length} peticiones para mover`);

      for (const peticion of peticionesParaMover) {
        await peticionService.moverAHistorico(peticion);
      }

      console.log("‚úÖ Peticiones movidas exitosamente");
    } else {
      console.log("‚úÖ No hay peticiones para mover");
    }
  } catch (error) {
    console.error("‚ùå Error moviendo peticiones al hist√≥rico:", error);
  }
});

// ==========================================
// CRON: Calcular estad√≠sticas mensuales
// Se ejecuta el primer d√≠a de cada mes a las 2 AM
// ==========================================
export const calcularEstadisticasMensuales = cron.schedule("0 2 1 * *", async () => {
  try {
    console.log("üìä Calculando estad√≠sticas mensuales...");

    const ahora = new Date();
    const mesAnterior = ahora.getMonth() === 0 ? 12 : ahora.getMonth();
    const a√±oAnterior = ahora.getMonth() === 0 ? ahora.getFullYear() - 1 : ahora.getFullYear();

    await estadisticaService.recalcularTodasEstadisticas(a√±oAnterior, mesAnterior);

    console.log(`‚úÖ Estad√≠sticas calculadas para ${a√±oAnterior}-${mesAnterior}`);
  } catch (error) {
    console.error("‚ùå Error calculando estad√≠sticas:", error);
  }
});

// ==========================================
// CRON: Generar periodos de facturaci√≥n
// Se ejecuta el primer d√≠a de cada mes a las 3 AM
// ==========================================
export const generarPeriodosFacturacion = cron.schedule("0 3 1 * *", async () => {
  try {
    console.log("üí∞ Generando periodos de facturaci√≥n...");

    const ahora = new Date();
    const mesAnterior = ahora.getMonth() === 0 ? 12 : ahora.getMonth();
    const a√±oAnterior = ahora.getMonth() === 0 ? ahora.getFullYear() - 1 : ahora.getFullYear();

    await facturacionService.generarPeriodosParaTodosLosClientes(a√±oAnterior, mesAnterior);

    console.log(`‚úÖ Periodos de facturaci√≥n generados para ${a√±oAnterior}-${mesAnterior}`);
  } catch (error) {
    console.error("‚ùå Error generando periodos de facturaci√≥n:", error);
  }
});

// ==========================================
// Iniciar todos los cron jobs
// ==========================================
export const iniciarCronJobs = () => {
  console.log("üöÄ Iniciando cron jobs...");

  verificarPeticionesVencidas.start();
  moverPeticionesResueltasAHistorico.start();
  calcularEstadisticasMensuales.start();
  generarPeriodosFacturacion.start();

  console.log("‚úÖ Cron jobs iniciados correctamente");
};

// Detener todos los cron jobs
export const detenerCronJobs = () => {
  verificarPeticionesVencidas.stop();
  moverPeticionesResueltasAHistorico.stop();
  calcularEstadisticasMensuales.stop();
  generarPeriodosFacturacion.stop();

  console.log("‚è∏Ô∏è  Cron jobs detenidos");
};